@page "/"
@using System.Diagnostics
@using System.Text.Json
@using CareCare.Data
@using MudBlazor

<h1>Hello, world!</h1>

<div>
    <MudBlazor.MudDataGrid @ref="mudDataGrid" T="Customer" Items="@_customers"
    ReadOnly="false" EditMode="DataGridEditMode.Form"
    StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Filterable="true" SortMode="SortMode.Multiple" Groupable="true" Hover="false" Dense="true" Striped="true" Bordered="true"
    FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive">
        <Columns>
            <PropertyColumn Property="c => c.CustomerId" />
            <PropertyColumn Property="c => c.CustomerName" />
            <PropertyColumn Property="c => c.PhoneNumber" />
            <PropertyColumn Property="c => c.Email" />
            <PropertyColumn Property="c => c.ServiceDate" />
            <PropertyColumn Property="c => c.VehicleIsDetailed" />
            <PropertyColumn Property="c => c.VehicleIsTinted" />
            <PropertyColumn Property="c => c.TotalCostOfServices" />
            <PropertyColumn Property="c => c.Overhead" />
            <PropertyColumn Property="c => c.AmountChargedToCustomer" />
            @* <PropertyColumn Property="c => c.Vehicles" /> *@

            @* <TemplateColumn CellClass="d-flex justify-end"> *@
            @* <TemplateColumn>
                 <CellTemplate Context="context">
                    <div class="d-flex justify-end">
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(async () => await context.Actions.StartEditingItemAsync(context.Item))" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteItem(context.Item))" />
                    </div>
                </CellTemplate>
            </TemplateColumn> *@
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Customer" />
        </PagerContent>
    </MudBlazor.MudDataGrid>
</div>

<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@NewItem">New Item</MudButton>
&emsp;
<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@LoadData">Load Test Data</MudButton>
&nbsp;
<MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@ClearDb">Clear Db</MudButton>
&nbsp;



<br />
<br />

@* // Copy Paste *@
<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events" Expanded="true">

        @{
            i = _events.Count;
        }
        @foreach (var message in _events)
        {
                <MudText Typo="@Typo.body2">[@(i--)]@message</MudText>
        }
        @if (_events.Count > 0)
        {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {

    CustomerRepository _repository = new CustomerRepository();
    // List<ICustomer> _iCustomers = new List<ICustomer>();
    List<Customer> _customers = new List<Customer>();
    private MudDataGrid<Customer> mudDataGrid = new MudDataGrid<Customer>();
    private List<string> _events = new();
    int i;

    protected override void OnInitialized()
    {
        LogEvent("*** Event = OnInitialized()");
        // _iCustomers = _repository.GetAllCustomers();
        _customers = _repository.GetAllCustomers().Cast<Customer>().ToList();
        LogEvent($" ... Products Loaded: {_customers.Count()}");
    }

    private void LoadData()
    {
        LogEvent($"*** Event = LoadData");


        LogEvent(" ... Checking Database");
        // _iCustomers = _repository.GetAllCustomers();
        _customers = _repository.GetAllCustomers().Cast<Customer>().ToList();
        if (_customers.Count == 0)
        {
            LogEvent(" ... No Products found, getting test data");
            // _iCustomers = CareCare.Data.TestICustomers.GetTestCustomers();
            _customers = CareCare.Data.TestCustomers.GetTestCustomers().Cast<Customer>().ToList();
            LogEvent(" ... Adding Products to Db");

            // Lets check adding one product ...
            // Product product = _products.First();
            // Debug.WriteLine($"Product: {product}");
            // Debug.WriteLine($"Product Id: {JsonSerializer.Serialize(product)}");
            // var result = _repository.AddProduct(product);
            // Debug.WriteLine($"Result: {result}");
            // Debug.WriteLine($"Result Id: {JsonSerializer.Serialize(result)}");

            // now lets add them all
            _customers.ForEach(c => _repository.AddCustomer(c));
            LogEvent(" ... Finished Initializing Data");
        }
        else LogEvent(" ... Warning: Database is not empty.");

    }

    private void LogEvent(string message)
    {
        Debug.WriteLine(message);
        _events.Insert(0, message);
    }

    private void StartedEditingItem(Customer customer)
    {
        LogEvent($"*** Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(customer)}");
    }

    private void CanceledEditingItem(Customer customer)
    {
        LogEvent($"*** Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(customer)}");
    }

    private void CommittedItemChanges(Customer customer)
    {
        LogEvent($"*** Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(customer)}");
        _repository.UpdateCustomer(customer);

    }

    private void DeleteItem(Customer customer)
    {
        LogEvent($"*** Event = DeleteItem, Data = {System.Text.Json.JsonSerializer.Serialize(customer)}");
        _customers.Remove(customer);
        _repository.DeleteCustomer(customer.CustomerId);
    }

    private void NewItem()
    {
        LogEvent($"*** Event = NewItem, Start");
        var newCustomer = new Customer()
            {
                CustomerId = _customers.Count() > 0 ? _customers.Max(p => p.CustomerId) + 1 : 1,
                CustomerName = "John Doe",
                PhoneNumber = "888-888-8888",
                Email = "JohnDoe@gmail.com",
                ServiceDate = "yyyy-MM-dd",
                VehicleIsDetailed = false,
                VehicleIsTinted = false,
                TotalCostOfServices = 0,
                Overhead = 0,
                AmountChargedToCustomer = 0,
                // Vehicles = new List<Vehicles>(),
            };
        _customers.Add(newCustomer);
        _repository.AddCustomer(newCustomer);

        mudDataGrid.SetEditingItemAsync(newCustomer);
        LogEvent($" ... NewItem, Data = {System.Text.Json.JsonSerializer.Serialize(newCustomer)}");

    }

    private void ClearDb()
    {
        LogEvent($"*** Event = ClearDb");
        _repository.ResetDatabase();
        _customers.Clear();
    }
}

